//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Scripts/Core/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace AsteroidsPlus.Core
{
    public partial class @InputSystem : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputSystem()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""Ship"",
            ""id"": ""5f499ea4-2052-413e-91d8-307579707d6a"",
            ""actions"": [
                {
                    ""name"": ""Move Forward"",
                    ""type"": ""Button"",
                    ""id"": ""ff6bdfb9-32f9-4a69-a37b-d46b1e533a08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""87135bad-c03f-4cdc-a376-6d4a9130fe11"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn Left"",
                    ""type"": ""Button"",
                    ""id"": ""db8ffff1-815b-4f69-9d69-a7941e5f9052"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Turn Right"",
                    ""type"": ""Button"",
                    ""id"": ""faf695cf-2b75-4762-95f9-8a61eab2fe0c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire Main Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""cb3101ec-7b2e-46ff-8671-7d9b9eac0bae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire Ultimate Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""12028108-9b98-478f-b80f-cbefcc9ddd32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c645ccf2-b449-482d-b887-8a61e7fd92c7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbcb3262-46f5-4f9c-8965-cf5e7be970e7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82555ae2-6097-4e33-ab9a-188a39c20fcd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f05758a-5ae4-4622-bd5a-e4ac5edf6f72"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2abcfd4-1b1a-4fb0-aeff-66a6073bc72e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire Main Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f683db28-3b8a-4fc8-b0dc-8a4ba92a77cb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire Ultimate Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu"",
            ""id"": ""d379a3a4-29b8-49a9-9fee-9f1970c34851"",
            ""actions"": [
                {
                    ""name"": ""PressAnyKey"",
                    ""type"": ""Button"",
                    ""id"": ""94ad1589-c4a4-49c0-a35d-c5743579cdc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d3643a2-6d59-4cbd-9027-665456439ade"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PressAnyKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Ship
            m_Ship = asset.FindActionMap("Ship", throwIfNotFound: true);
            m_Ship_MoveForward = m_Ship.FindAction("Move Forward", throwIfNotFound: true);
            m_Ship_Shoot = m_Ship.FindAction("Shoot", throwIfNotFound: true);
            m_Ship_TurnLeft = m_Ship.FindAction("Turn Left", throwIfNotFound: true);
            m_Ship_TurnRight = m_Ship.FindAction("Turn Right", throwIfNotFound: true);
            m_Ship_FireMainWeapon = m_Ship.FindAction("Fire Main Weapon", throwIfNotFound: true);
            m_Ship_FireUltimateWeapon = m_Ship.FindAction("Fire Ultimate Weapon", throwIfNotFound: true);
            // Menu
            m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
            m_Menu_PressAnyKey = m_Menu.FindAction("PressAnyKey", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Ship
        private readonly InputActionMap m_Ship;
        private IShipActions m_ShipActionsCallbackInterface;
        private readonly InputAction m_Ship_MoveForward;
        private readonly InputAction m_Ship_Shoot;
        private readonly InputAction m_Ship_TurnLeft;
        private readonly InputAction m_Ship_TurnRight;
        private readonly InputAction m_Ship_FireMainWeapon;
        private readonly InputAction m_Ship_FireUltimateWeapon;
        public struct ShipActions
        {
            private @InputSystem m_Wrapper;
            public ShipActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveForward => m_Wrapper.m_Ship_MoveForward;
            public InputAction @Shoot => m_Wrapper.m_Ship_Shoot;
            public InputAction @TurnLeft => m_Wrapper.m_Ship_TurnLeft;
            public InputAction @TurnRight => m_Wrapper.m_Ship_TurnRight;
            public InputAction @FireMainWeapon => m_Wrapper.m_Ship_FireMainWeapon;
            public InputAction @FireUltimateWeapon => m_Wrapper.m_Ship_FireUltimateWeapon;
            public InputActionMap Get() { return m_Wrapper.m_Ship; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ShipActions set) { return set.Get(); }
            public void SetCallbacks(IShipActions instance)
            {
                if (m_Wrapper.m_ShipActionsCallbackInterface != null)
                {
                    @MoveForward.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnMoveForward;
                    @MoveForward.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnMoveForward;
                    @MoveForward.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnMoveForward;
                    @Shoot.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnShoot;
                    @Shoot.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnShoot;
                    @Shoot.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnShoot;
                    @TurnLeft.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnTurnLeft;
                    @TurnLeft.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnTurnLeft;
                    @TurnLeft.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnTurnLeft;
                    @TurnRight.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnTurnRight;
                    @TurnRight.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnTurnRight;
                    @TurnRight.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnTurnRight;
                    @FireMainWeapon.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnFireMainWeapon;
                    @FireMainWeapon.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnFireMainWeapon;
                    @FireMainWeapon.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnFireMainWeapon;
                    @FireUltimateWeapon.started -= m_Wrapper.m_ShipActionsCallbackInterface.OnFireUltimateWeapon;
                    @FireUltimateWeapon.performed -= m_Wrapper.m_ShipActionsCallbackInterface.OnFireUltimateWeapon;
                    @FireUltimateWeapon.canceled -= m_Wrapper.m_ShipActionsCallbackInterface.OnFireUltimateWeapon;
                }
                m_Wrapper.m_ShipActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @MoveForward.started += instance.OnMoveForward;
                    @MoveForward.performed += instance.OnMoveForward;
                    @MoveForward.canceled += instance.OnMoveForward;
                    @Shoot.started += instance.OnShoot;
                    @Shoot.performed += instance.OnShoot;
                    @Shoot.canceled += instance.OnShoot;
                    @TurnLeft.started += instance.OnTurnLeft;
                    @TurnLeft.performed += instance.OnTurnLeft;
                    @TurnLeft.canceled += instance.OnTurnLeft;
                    @TurnRight.started += instance.OnTurnRight;
                    @TurnRight.performed += instance.OnTurnRight;
                    @TurnRight.canceled += instance.OnTurnRight;
                    @FireMainWeapon.started += instance.OnFireMainWeapon;
                    @FireMainWeapon.performed += instance.OnFireMainWeapon;
                    @FireMainWeapon.canceled += instance.OnFireMainWeapon;
                    @FireUltimateWeapon.started += instance.OnFireUltimateWeapon;
                    @FireUltimateWeapon.performed += instance.OnFireUltimateWeapon;
                    @FireUltimateWeapon.canceled += instance.OnFireUltimateWeapon;
                }
            }
        }
        public ShipActions @Ship => new ShipActions(this);

        // Menu
        private readonly InputActionMap m_Menu;
        private IMenuActions m_MenuActionsCallbackInterface;
        private readonly InputAction m_Menu_PressAnyKey;
        public struct MenuActions
        {
            private @InputSystem m_Wrapper;
            public MenuActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
            public InputAction @PressAnyKey => m_Wrapper.m_Menu_PressAnyKey;
            public InputActionMap Get() { return m_Wrapper.m_Menu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
            public void SetCallbacks(IMenuActions instance)
            {
                if (m_Wrapper.m_MenuActionsCallbackInterface != null)
                {
                    @PressAnyKey.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnPressAnyKey;
                    @PressAnyKey.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnPressAnyKey;
                    @PressAnyKey.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnPressAnyKey;
                }
                m_Wrapper.m_MenuActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PressAnyKey.started += instance.OnPressAnyKey;
                    @PressAnyKey.performed += instance.OnPressAnyKey;
                    @PressAnyKey.canceled += instance.OnPressAnyKey;
                }
            }
        }
        public MenuActions @Menu => new MenuActions(this);
        public interface IShipActions
        {
            void OnMoveForward(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnTurnLeft(InputAction.CallbackContext context);
            void OnTurnRight(InputAction.CallbackContext context);
            void OnFireMainWeapon(InputAction.CallbackContext context);
            void OnFireUltimateWeapon(InputAction.CallbackContext context);
        }
        public interface IMenuActions
        {
            void OnPressAnyKey(InputAction.CallbackContext context);
        }
    }
}
